// ===================================================================
//  AI_ENGINE.JS - MODULE TR·ª¢ L√ù T∆Ø V·∫§N AI (PHI√äN B·∫¢N HO√ÄN THI·ªÜN)
//  VERSION 2.1 - N√ÇNG C·∫§P GIAO DI·ªÜN TR√åNH B√ÄY K·∫æT QU·∫¢
// ===================================================================

// --- ƒê·ªäNH NGHƒ®A C√ÇY H·ªòI THO·∫†I V√Ä LOGIC ---
const conversationTree = {
    start: {
        text: "Ch√†o b·∫°n, t√¥i l√† Tr·ª£ l√Ω AI c·ªßa Minh ƒêƒÉng IT. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?",
        options: [
            { text: "T∆∞ v·∫•n l·∫Øp m√°y m·ªõi", next: "build_pc_purpose" },
            { text: "M√°y t√≠nh c·ªßa t√¥i g·∫∑p s·ª± c·ªë", next: "diagnose_symptom" },
            { text: "T√¨m hi·ªÉu d·ªãch v·ª• kh√°c", next: "other_services" },
        ]
    },
    // --- Lu·ªìng 1: X√¢y d·ª±ng PC ---
    build_pc_purpose: {
        text: "Tuy·ªát v·ªùi! B·∫°n mu·ªën build m√°y v·ªõi m·ª•c ƒë√≠ch ch√≠nh l√† g√¨?",
        options: [
            { text: "Gaming / Stream", value: "Gaming / Stream", next: "build_pc_budget" },
            { text: "ƒê·ªì h·ªça / Render Video", value: "ƒê·ªì h·ªça / Render", next: "build_pc_budget" },
            { text: "VƒÉn ph√≤ng / H·ªçc t·∫≠p", value: "VƒÉn ph√≤ng / H·ªçc t·∫≠p", next: "build_pc_budget" }
        ]
    },
    build_pc_budget: {
        text: "T√¥i ƒë√£ hi·ªÉu. Ng√¢n s√°ch d·ª± ki·∫øn c·ªßa b·∫°n cho b·ªô m√°y n√†y l√† bao nhi√™u?",
        options: [
            { text: "D∆∞·ªõi 15 tri·ªáu", value: "D∆∞·ªõi 15 tri·ªáu", key: "low", next: "result_build" },
            { text: "T·ª´ 15 - 25 tri·ªáu", value: "15 - 25 tri·ªáu", key: "mid", next: "result_build" },
            { text: "T·ª´ 25 - 40 tri·ªáu", value: "25 - 40 tri·ªáu", key: "high", next: "result_build" },
            { text: "Tr√™n 40 tri·ªáu", value: "Tr√™n 40 tri·ªáu", key: "ultra", next: "result_build" }
        ]
    },
    // --- Lu·ªìng 2: Ch·∫©n ƒëo√°n s·ª± c·ªë ---
    diagnose_symptom: {
        text: "T√¥i r·∫•t ti·∫øc khi nghe ƒëi·ªÅu ƒë√≥. Vui l√≤ng m√¥ t·∫£ s·ª± c·ªë b·∫°n ƒëang g·∫∑p ph·∫£i:",
        options: [
            { text: "M√°y ch·∫°y r·∫•t ch·∫≠m, gi·∫≠t lag", value: "slow", next: "result_diagnose" },
            { text: "M√°y kh√¥ng l√™n ngu·ªìn", value: "no_power", next: "result_diagnose" },
            { text: "M√°y hay b·ªã treo, m√†n h√¨nh xanh", value: "crash", next: "result_diagnose" },
            { text: "V·∫•n ƒë·ªÅ kh√°c", value: "other", next: "result_diagnose" }
        ]
    },
    // --- Lu·ªìng 3: D·ªãch v·ª• kh√°c ---
    other_services: {
        text: "Ngo√†i PC, ch√∫ng t√¥i c√≤n cung c·∫•p c√°c gi·∫£i ph√°p chuy√™n nghi·ªáp kh√°c. B·∫°n quan t√¢m ƒë·∫øn lƒ©nh v·ª±c n√†o?",
        // C√°c options s·∫Ω ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông
    },
    // --- C√°c b∆∞·ªõc k·∫øt qu·∫£ ---
    result_build: { action: "buildPcConfig" },
    result_diagnose: { action: "diagnoseProblem" },
    result_other: { action: "showSubServices" }
};

// --- B·ªò N√ÉO C·ª¶A AI ---
document.addEventListener('DOMContentLoaded', () => {
    // --- Khai b√°o c√°c bi·∫øn DOM ---
    const aiModal = document.getElementById('ai-assistant-modal');
    const openAiBtn = document.getElementById('ai-assistant-btn');
    const closeAiBtn = document.getElementById('ai-close-modal-btn');
    const chatLog = document.getElementById('ai-chat-log');
    const optionsContainer = document.getElementById('ai-options-container');

    if (!aiModal || !openAiBtn || !closeAiBtn || !chatLog || !optionsContainer) {
        console.error("M·ªôt ho·∫∑c nhi·ªÅu th√†nh ph·∫ßn UI c·ªßa Tr·ª£ l√Ω AI kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y.");
        return;
    }
    
    let isDataReady = false;
    let conversationState = {};

    document.addEventListener('dataLoaded', () => {
        isDataReady = true;
        console.log("AI Engine: D·ªØ li·ªáu ƒë√£ s·∫µn s√†ng, AI c√≥ th·ªÉ ho·∫°t ƒë·ªông.");
    });
    
    const addMessage = (type, text, contentHtml = '') => {
        const messageWrapper = document.createElement('div');
        if (contentHtml) {
            // N·∫øu c√≥ contentHtml, n√≥ s·∫Ω l√† to√†n b·ªô n·ªôi dung c·ªßa message
            messageWrapper.innerHTML = contentHtml;
        } else {
            messageWrapper.className = type === 'ai' ? 'ai-message' : 'user-message';
            let messageHtml = '';
            if (type === 'ai') messageHtml += `<div class="ai-avatar">ü§ñ</div>`;
            messageHtml += `<div class="${type === 'ai' ? 'ai-bubble' : 'user-bubble'}">${text}</div>`;
            messageWrapper.innerHTML = messageHtml;
        }
        chatLog.appendChild(messageWrapper);
        chatLog.scrollTop = chatLog.scrollHeight;
    };

    const showOptions = (options) => {
        optionsContainer.innerHTML = '';
        if (!options || options.length === 0) {
            optionsContainer.style.display = 'none';
            return;
        }
        optionsContainer.style.display = 'flex';
        options.forEach(option => {
            const button = document.createElement('button');
            button.className = 'ai-option-btn';
            button.textContent = option.text;
            button.dataset.next = option.next;
            button.dataset.value = option.value || option.text;
            if(option.key) button.dataset.key = option.key;
            optionsContainer.appendChild(button);
        });
    };

    const handleOptionClick = (e) => {
        if (!e.target.matches('.ai-option-btn')) return;
        const button = e.target;
        addMessage('user', button.textContent);
        
        const previousNodeKey = conversationState.currentNode;
        if (previousNodeKey === 'build_pc_purpose') conversationState.purpose = button.dataset.value;
        if (previousNodeKey === 'build_pc_budget') {
            conversationState.budget = button.dataset.value;
            conversationState.budget_key = button.dataset.key;
        }
        if (previousNodeKey === 'diagnose_symptom') conversationState.symptom = button.dataset.value;
        if (previousNodeKey === 'other_services') conversationState.serviceId = button.dataset.value;

        navigateToNode(button.dataset.next);
    };

    const navigateToNode = (nodeKey) => {
        const node = conversationTree[nodeKey];
        conversationState.currentNode = nodeKey;
        if (!node) return;

        if (node.text) addMessage('ai', node.text);

        if (node.options) {
            showOptions(node.options);
        } else if (node.action) {
            showOptions([]);
            executeAction(node.action);
        } else if (nodeKey === 'other_services') {
            const otherServiceOptions = servicesData
                .filter(s => s.id !== 'xay-dung-pc' && s.id !== 'sua-chua-pc')
                .map(s => ({ text: s.name, value: s.id, next: "result_other" }));
             otherServiceOptions.push({ text: "Quay l·∫°i", next: "start" });
             showOptions(otherServiceOptions);
        }
    };
    
    const executeAction = (actionName) => {
        switch (actionName) {
            case 'buildPcConfig': generatePcBuild(); break;
            case 'diagnoseProblem': diagnoseProblem(); break;
            case 'showSubServices': showSubServices(); break;
        }
    };
    
    const findComponent = (type, budget, constraints = {}) => {
        const candidates = pcComponentsData
            .filter(c => {
                if (c.type !== type || c.price > budget) return false;
                if (constraints.socket && c.socket && c.socket !== constraints.socket) return false;
                if (constraints.ram_type && c.ram_type && c.ram_type !== constraints.ram_type) return false;
                return true;
            })
            .sort((a, b) => b.price - a.price);
        return candidates[0] || null;
    };
    
    const generatePcBuild = () => {
        const { purpose, budget_key } = conversationState;
        addMessage('ai', `Ok, t√¥i ƒëang ph√¢n t√≠ch theo nhu c·∫ßu **${purpose}**, ng√¢n s√°ch **${conversationState.budget}** ƒë·ªÉ x√¢y d·ª±ng c·∫•u h√¨nh t∆∞∆°ng th√≠ch v√† t·ªëi ∆∞u nh·∫•t...`);
        
        const budgetMappings = { low: 15000000, mid: 25000000, high: 40000000, ultra: 100000000 };
        const maxBudget = budgetMappings[budget_key];

        let build = {}; let currentCost = 0;

        let cpuBudget = maxBudget * 0.25;
        build.cpu = findComponent('cpu', cpuBudget);
        if (!build.cpu) {
            addMessage('ai', 'R·∫•t ti·∫øc, t√¥i kh√¥ng t√¨m th·∫•y CPU ph√π h·ª£p trong t·∫ßm gi√° n√†y. Vui l√≤ng th·ª≠ l·∫°i v·ªõi ng√¢n s√°ch kh√°c.');
            showOptions([{ text: "B·∫Øt ƒë·∫ßu l·∫°i", next: "start" }]); return;
        }
        currentCost += build.cpu.price;

        let mainBudget = maxBudget * 0.15;
        build.mainboard = findComponent('mainboard', mainBudget, { socket: build.cpu.socket });
        if (!build.mainboard) build.mainboard = findComponent('mainboard', maxBudget, { socket: build.cpu.socket });
        if (!build.mainboard) {
            addMessage('ai', 'R·∫•t ti·∫øc, kh√¥ng c√≥ Mainboard n√†o t∆∞∆°ng th√≠ch v·ªõi CPU ƒë√£ ch·ªçn.');
            showOptions([{ text: "B·∫Øt ƒë·∫ßu l·∫°i", next: "start" }]); return;
        }
        currentCost += build.mainboard.price;

        let ramBudget = maxBudget * 0.1;
        build.ram = findComponent('ram', ramBudget, { ram_type: build.mainboard.ram_type });
        if (!build.ram) build.ram = findComponent('ram', maxBudget, { ram_type: build.mainboard.ram_type });
        if (!build.ram) {
            addMessage('ai', 'R·∫•t ti·∫øc, kh√¥ng c√≥ RAM n√†o t∆∞∆°ng th√≠ch v·ªõi Mainboard ƒë√£ ch·ªçn.');
            showOptions([{ text: "B·∫Øt ƒë·∫ßu l·∫°i", next: "start" }]); return;
        }
        currentCost += build.ram.price;
        
        let remainingBudget = maxBudget - currentCost;
        if (remainingBudget <= 0) {
             addMessage('ai', 'Ng√¢n s√°ch c·ªßa b·∫°n ch·ªâ v·ª´a ƒë·ªß cho CPU, Mainboard v√† RAM. H√£y c√¢n nh·∫Øc tƒÉng ng√¢n s√°ch ƒë·ªÉ c√≥ m·ªôt b·ªô m√°y ho√†n ch·ªânh.');
             displayBuildResult(Object.values(build).filter(c => c), currentCost); return;
        }
        
        if (purpose !== 'VƒÉn ph√≤ng / H·ªçc t·∫≠p') {
            build.gpu = findComponent('gpu', remainingBudget * 0.6);
            if (build.gpu) remainingBudget -= build.gpu.price;
        }
        
        build.storage = findComponent('storage', remainingBudget * 0.3);
        if (build.storage) remainingBudget -= build.storage.price;
        
        build.psu = findComponent('psu', remainingBudget * 0.4);
        if (build.psu) remainingBudget -= build.psu.price;

        build.case = findComponent('case', remainingBudget * 0.8);
        if(build.case) remainingBudget -= build.case.price;

        const finalBuild = Object.values(build).filter(c => c);
        const totalCost = finalBuild.reduce((sum, item) => sum + item.price, 0);
        
        displayBuildResult(finalBuild, totalCost);
    };

    const displayBuildResult = (build, total) => {
        let itemsHtml = '';
        build.forEach(item => {
            itemsHtml += `
                <div class="build-item-row">
                    <img src="${item.image || 'https://placehold.co/100x100/0a0a1a/00ffff?text=IMG'}" alt="${item.name}" class="build-item-image">
                    <div class="build-item-info">
                        <span class="build-item-type">${item.type}</span>
                        <span class="build-item-name">${item.name}</span>
                    </div>
                    <span class="build-item-price">${new Intl.NumberFormat('vi-VN').format(item.price)}ƒë</span>
                </div>`;
        });

        const resultHtml = `
            <div class="ai-result-card">
                <div class="ai-result-header">
                    <h3 class="font-tech">C·∫•u H√¨nh ƒê·ªÅ Xu·∫•t</h3>
                    <p>D√†nh cho: <strong>${conversationState.purpose}</strong><br>Ng√¢n s√°ch: <strong>${conversationState.budget}</strong></p>
                </div>
                <div class="ai-result-body">
                    ${itemsHtml}
                </div>
                <div class="ai-result-footer">
                    <span>T·ªïng c·ªông (∆∞·ªõc t√≠nh):</span>
                    <span class="font-tech">${new Intl.NumberFormat('vi-VN').format(total)}ƒë</span>
                </div>
            </div>`;

        addMessage('ai', '', resultHtml);
        showOptions([
            { text: "Th√™m t·∫•t c·∫£ v√†o Y√™u C·∫ßu", value: JSON.stringify(build), next: "add_to_cart_and_close" },
            { text: "L√†m l·∫°i t·ª´ ƒë·∫ßu", next: "start" }
        ]);
    };
    
    const diagnoseProblem = () => {
        const { symptom } = conversationState;
        let suggestions = [];
        
        switch (symptom) {
            case 'slow':
                suggestions.push(findSubServiceById('scpc01'), findSubServiceById('scpc02'), findSubServiceById('scpc03'));
                break;
            case 'no_power':
            case 'crash':
                 suggestions.push(findSubServiceById('scpc01'));
                 addMessage('ai', "S·ª± c·ªë n√†y c√≥ th·ªÉ do nhi·ªÅu nguy√™n nh√¢n (ngu·ªìn, mainboard, RAM...). T·ªët nh·∫•t b·∫°n n√™n mang m√°y ƒë·∫øn ƒë·ªÉ ch√∫ng t√¥i ki·ªÉm tra tr·ª±c ti·∫øp v√† b√°o gi√° ch√≠nh x√°c.");
                break;
            case 'other':
                addMessage('ai', "V·ªõi c√°c s·ª± c·ªë ph·ª©c t·∫°p, b·∫°n vui l√≤ng li√™n h·ªá tr·ª±c ti·∫øp qua SƒêT ho·∫∑c Zalo ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ nhanh nh·∫•t nh√©.");
                break;
        }

        const validSuggestions = suggestions.filter(s => s);
        if (validSuggestions.length > 0) {
            displayServiceResult(validSuggestions);
        } else {
             showOptions([{ text: "L√†m l·∫°i t·ª´ ƒë·∫ßu", next: "start" }]);
        }
    };
    
    const showSubServices = () => {
        const service = servicesData.find(s => s.id === conversationState.serviceId);
        if(service && service.subServices) displayServiceResult(service.subServices);
    };

    const findSubServiceById = (subId) => {
        for (const service of servicesData) {
            const found = service.subServices.find(sub => sub.subId === subId);
            if (found) return found;
        }
        return null;
    };
    
    const displayServiceResult = (services) => {
        let contentHtml = `<div class="mt-4 space-y-2 border-t border-gray-700 pt-3">`;
        services.forEach(item => {
            contentHtml += `<div class="flex justify-between items-center text-sm"><span>- ${item.name}</span><span class="font-mono text-primary">${isNaN(item.price) ? item.price : new Intl.NumberFormat('vi-VN').format(item.price) + 'ƒë'}</span></div>`;
        });
        contentHtml += `</div>`;
        
        addMessage('ai', "D·ª±a tr√™n m√¥ t·∫£ c·ªßa b·∫°n, t√¥i g·ª£i √Ω m·ªôt s·ªë d·ªãch v·ª• sau:", contentHtml);
        showOptions([
            { text: "Th√™m t·∫•t c·∫£ v√†o Y√™u C·∫ßu", value: JSON.stringify(services), next: "add_to_cart_and_close" },
            { text: "L√†m l·∫°i t·ª´ ƒë·∫ßu", next: "start" }
        ]);
    };

    const addToCartFromAI = (itemsJson) => {
        const items = JSON.parse(itemsJson);
        items.forEach(item => {
            const itemId = item.subId || item.id;
            const existingItem = cart.find(cartItem => (cartItem.subId || cartItem.id) === itemId);
            if (existingItem) existingItem.quantity++;
            else cart.push({ ...item, quantity: 1 });
        });
        localStorage.setItem('minhdangCart', JSON.stringify(cart));
        window.renderCart(); 
        
        addMessage('ai', "ƒê√£ th√™m c√°c m·ª•c v√†o gi·ªè h√†ng! Gi·ªè h√†ng c·ªßa b·∫°n s·∫Ω t·ª± ƒë·ªông m·ªü.");
        showOptions([{ text: "B·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán m·ªõi", next: "start" }]);
        
        setTimeout(() => {
            closeAiModal();
            window.toggleCartPanel();
        }, 1500);
    };

    const startConversation = () => {
        chatLog.innerHTML = '';
        conversationState = {}; 
        if (!isDataReady) {
            addMessage('ai', "D·ªØ li·ªáu ƒëang ƒë∆∞·ª£c t·∫£i, vui l√≤ng ch·ªù trong gi√¢y l√°t...");
            setTimeout(startConversation, 1000);
            return;
        }
        navigateToNode('start');
    };

    const openAiModal = () => { aiModal.classList.add('visible'); startConversation(); };
    const closeAiModal = () => aiModal.classList.remove('visible');

    openAiBtn.addEventListener('click', openAiModal);
    closeAiBtn.addEventListener('click', closeAiModal);
    optionsContainer.addEventListener('click', (e) => {
        if (!e.target.matches('.ai-option-btn')) return;
        if (e.target.dataset.next === 'add_to_cart_and_close') {
            addMessage('user', e.target.textContent);
            addToCartFromAI(e.target.dataset.value);
        } else {
            handleOptionClick(e);
        }
    });
    
    aiModal.addEventListener('click', (e) => { if (e.target === aiModal) closeAiModal(); });
    document.addEventListener('keydown', (e) => { if (e.key === 'Escape' && aiModal.classList.contains('visible')) closeAiModal(); });
    console.log("Tr·ª£ l√Ω AI ƒë√£ s·∫µn s√†ng!");
});

