/**
 * ai_engine.js - B·ªô n√£o x·ª≠ l√Ω logic cho Tr·ª£ l√Ω AI
 * Phi√™n b·∫£n: 5.0 (H·ªá Th·ªëng Gi√°m S√°t S·ª± Ki·ªán Trung T√¢m)
 */

// Bi·∫øn to√†n c·ª•c ƒë·ªÉ l∆∞u tr·ªØ d·ªØ li·ªáu v√† tr·∫°ng th√°i
let allPcComponents = [];
let conversationState = {};
let currentBuild = [];

// H√†m kh·ªüi t·∫°o, ƒë∆∞·ª£c g·ªçi t·ª´ script.js
function initializeAIAssistant(components) {
    allPcComponents = components;
    const aiBtn = document.getElementById('ai-assistant-btn');
    const aiModal = document.getElementById('ai-modal');
    const closeAiModalBtn = document.getElementById('close-ai-modal-btn');
    // --- N√ÇNG C·∫§P: L·∫•y container cha c·ªßa to√†n b·ªô n·ªôi dung modal ---
    const aiModalContent = document.querySelector('.ai-modal-content');

    // G·∫Øn c√°c listener c·ªë ƒë·ªãnh
    aiBtn?.addEventListener('click', startConversation);
    closeAiModalBtn?.addEventListener('click', endConversation);
    aiModal?.addEventListener('click', (e) => {
        if (e.target === aiModal) endConversation();
    });

    // --- ƒê·∫†I N√ÇNG C·∫§P: H·ªÜ TH·ªêNG GI√ÅM S√ÅT S·ª∞ KI·ªÜN TRUNG T√ÇM ---
    // G·∫Øn m·ªôt listener duy nh·∫•t cho to√†n b·ªô modal content ƒë·ªÉ b·∫Øt t·∫•t c·∫£ c√°c click
    aiModalContent?.addEventListener('click', (e) => {
        // T√¨m n√∫t b·∫•m g·∫ßn nh·∫•t v·ªõi v·ªã tr√≠ click
        const button = e.target.closest('.ai-option-btn');
        // Ch·ªâ x·ª≠ l√Ω n·∫øu t√¨m th·∫•y n√∫t v√† n√∫t kh√¥ng b·ªã v√¥ hi·ªáu h√≥a
        if (button && !button.disabled) {
            const text = button.textContent;
            const action = button.dataset.action;
            // D·ªØ li·ªáu ƒë∆∞·ª£c l∆∞u trong data-data attribute
            const data = button.dataset.data ? JSON.parse(button.dataset.data) : {};
            handleOptionClick(text, action, data);
        }
    });
}

// B·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán
function startConversation() {
    document.getElementById('ai-modal')?.classList.add('visible');
    document.getElementById('ai-chat-log').innerHTML = ''; // X√≥a l·ªãch s·ª≠
    conversationState = { step: 'start' };
    currentBuild = [];

    appendMessage('ai', "Ch√†o b·∫°n, t√¥i l√† Tr·ª£ l√Ω AI c·ªßa Minh ƒêƒÉng IT. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?");
    showOptions([
        { text: 'T∆∞ v·∫•n l·∫Øp m√°y m·ªõi', action: 'startBuildPc' },
        { text: 'M√°y c·ªßa t√¥i g·∫∑p s·ª± c·ªë', action: 'diagnoseProblem' },
        { text: 'T√¨m d·ªãch v·ª• kh√°c', action: 'findService' }
    ]);
}

// K·∫øt th√∫c cu·ªôc tr√≤ chuy·ªán
function endConversation() {
    document.getElementById('ai-modal')?.classList.remove('visible');
}

// Hi·ªÉn th·ªã tin nh·∫Øn trong chat log
function appendMessage(sender, text, contentHtml = '') {
    const chatLog = document.getElementById('ai-chat-log');
    const messageDiv = document.createElement('div');
    
    if (sender === 'ai') {
        messageDiv.className = 'ai-message';
        messageDiv.innerHTML = `<div class="ai-avatar">ü§ñ</div><div class="ai-bubble"><p>${text}</p>${contentHtml}</div>`;
    } else {
        messageDiv.className = 'user-message';
        messageDiv.innerHTML = `<div class="user-bubble">${text}</div>`;
    }
    chatLog.appendChild(messageDiv);
    chatLog.scrollTop = chatLog.scrollHeight;
}

// Hi·ªÉn th·ªã c√°c n√∫t l·ª±a ch·ªçn
function showOptions(options) {
    const optionsContainer = document.getElementById('ai-options-container');
    optionsContainer.innerHTML = ''; // Lu√¥n x√≥a c√°c n√∫t c≈©
    options.forEach(option => {
        const button = document.createElement('button');
        button.className = 'ai-option-btn';
        button.textContent = option.text;
        button.dataset.action = option.action;
        if (option.data) {
            // Lu√¥n stringify data ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh nh·∫•t qu√°n
            button.dataset.data = JSON.stringify(option.data);
        }
        optionsContainer.appendChild(button);
    });
}

// X·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn m·ªôt option
function handleOptionClick(text, action, data = {}) {
    // Ch·ªâ hi·ªÉn th·ªã tin nh·∫Øn ng∆∞·ªùi d√πng cho c√°c h√†nh ƒë·ªông ch√≠nh, kh√¥ng ph·∫£i khi b·∫•m "Thay ƒë·ªïi"
    if(action !== 'changeComponent' && action !== 'selectNewComponent' && action !== 'redisplayBuild') {
        appendMessage('user', text);
    }
    // Lu√¥n d·ªçn d·∫πp khu v·ª±c n√∫t b·∫•m ch√≠nh
    document.getElementById('ai-options-container').innerHTML = '';

    setTimeout(() => {
        switch (action) {
            case 'startBuildPc': promptForBudget(); break;
            case 'setBudget':
                conversationState.budget = data;
                promptForPurpose(data.key);
                break;
            case 'setPurpose':
                conversationState.purpose = data;
                processBuildConfig();
                break;
            case 'diagnoseProblem':
                 appendMessage('ai', "Ch·ª©c nƒÉng n√†y ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn. B·∫°n c√≥ th·ªÉ tham kh·∫£o c√°c d·ªãch v·ª• s·ª≠a ch·ªØa c·ªßa ch√∫ng t√¥i nh√©!");
                 setTimeout(endConversation, 2000);
                break;
            case 'findService':
                 appendMessage('ai', "Ch·ª©c nƒÉng n√†y ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn. B·∫°n c√≥ th·ªÉ tham kh·∫£o c√°c d·ªãch v·ª• tr√™n trang web nh√©!");
                 setTimeout(endConversation, 2000);
                break;
            case 'addToCart': addBuildToCart(); break;
            case 'changeComponent': promptForComponentChange(data.type); break;
            case 'selectNewComponent': updateComponent(data.newComponent); break;
            case 'restart': startConversation(); break;
            case 'redisplayBuild':
                const result = calculatePsuAndFinalize(currentBuild, conversationState.budget);
                if (result && result.build) {
                    displayBuildResult(result.build, result.totalPrice, result.wattage);
                    showOptions([{ text: 'Th√™m v√†o Y√™u C·∫ßu', action: 'addToCart' }, { text: 'L√†m l·∫°i t·ª´ ƒë·∫ßu', action: 'restart' }]);
                } else {
                    appendMessage('ai', "ƒê√£ c√≥ l·ªói x·∫£y ra khi hi·ªÉn th·ªã l·∫°i c·∫•u h√¨nh.");
                }
                break;
        }
    }, 500);
}

// --- LU·ªíNG T∆Ø V·∫§N BUILD PC ---
function promptForBudget() {
    appendMessage('ai', "Tuy·ªát v·ªùi! Tr∆∞·ªõc h·∫øt, b·∫°n d·ª± ƒë·ªãnh ƒë·∫ßu t∆∞ kho·∫£ng bao nhi√™u cho b·ªô m√°y m·ªõi n√†y?");
    showOptions([
        { text: 'H·ªçc sinh (< 8 tri·ªáu)', action: 'setBudget', data: { key: 'student-lt-8m', min: 0, max: 8000000 } },
        { text: 'C∆° b·∫£n (8 - 15 tri·ªáu)', action: 'setBudget', data: { key: 'basic-8-15m', min: 8000000, max: 15000000 } },
        { text: 'T·∫ßm trung (15 - 25 tri·ªáu)', action: 'setBudget', data: { key: 'mid-15-25m', min: 15000000, max: 25000000 } },
        { text: 'Cao c·∫•p (25 - 40 tri·ªáu)', action: 'setBudget', data: { key: 'high-25-40m', min: 25000000, max: 40000000 } },
        { text: 'H·∫°ng sang (> 40 tri·ªáu)', action: 'setBudget', data: { key: 'luxury-gt-40m', min: 40000000, max: Infinity } }
    ]);
}

function promptForPurpose(budgetKey) {
    appendMessage('ai', "ƒê√£ hi·ªÉu. B·∫°n s·∫Ω d√πng m√°y ch·ªß y·∫øu cho m·ª•c ƒë√≠ch g√¨?");
    let purposes = [
        { text: 'H·ªçc t·∫≠p & Gi·∫£i tr√≠ nh·∫π', action: 'setPurpose', data: 'study' },
        { text: 'Ch∆°i Game', action: 'setPurpose', data: 'gaming' },
        { text: 'L√†m ƒê·ªì h·ªça / Video', action: 'setPurpose', data: 'workstation' }
    ];
    if (budgetKey === 'student-lt-8m' || budgetKey === 'basic-8-15m') {
        purposes = purposes.filter(p => p.data !== 'workstation');
    }
    showOptions(purposes);
}

function processBuildConfig() {
    appendMessage('ai', "Ok, d·ª±a tr√™n l·ª±a ch·ªçn c·ªßa b·∫°n, t√¥i ƒëang ph√¢n t√≠ch c√°c linh ki·ªán ph√π h·ª£p nh·∫•t. Vui l√≤ng ch·ªù trong gi√¢y l√°t...");
    setTimeout(() => {
        const result = buildPc(conversationState.budget, conversationState.purpose);
        if (result && result.build) {
            currentBuild = result.build;
            displayBuildResult(result.build, result.totalPrice, result.wattage);
            showOptions([{ text: 'Th√™m v√†o Y√™u C·∫ßu', action: 'addToCart' }, { text: 'L√†m l·∫°i t·ª´ ƒë·∫ßu', action: 'restart' }]);
        } else {
            appendMessage('ai', "R·∫•t ti·∫øc, t√¥i kh√¥ng t√¨m th·∫•y c·∫•u h√¨nh n√†o ph√π h·ª£p v·ªõi c√°c ti√™u ch√≠ n√†y. B·∫°n vui l√≤ng th·ª≠ l·∫°i v·ªõi l·ª±a ch·ªçn kh√°c nh√©.");
            showOptions([{ text: 'Ch·ªçn l·∫°i ng√¢n s√°ch', action: 'startBuildPc' }]);
        }
    }, 1000);
}

// --- LOGIC BUILD PC --- (Gi·ªØ nguy√™n, kh√¥ng thay ƒë·ªïi)
function findCheapestComponent(type, filterFunc = () => true) {
    return allPcComponents.filter(c => c.type === type && filterFunc(c)).sort((a, b) => a.price - b.price)[0];
}

function findComponents(type, filterFunc = () => true) {
    return allPcComponents.filter(c => c.type === type && filterFunc(c)).sort((a, b) => a.price - b.price);
}

function buildPc(budget, purpose) {
    let cpu, mainboard, ram, gpu, storage, psu, caseComponent, cooler;
    switch (budget.key) {
        case 'student-lt-8m':
            cpu = findCheapestComponent('cpu', c => c.price < 3500000 && c.name.includes('G'));
            gpu = null;
            mainboard = findCheapestComponent('mainboard', m => m.socket === cpu?.socket && m.ram_type === 'DDR4');
            ram = findCheapestComponent('ram', r => r.ram_type === 'DDR4' && r.name.includes('8GB'));
            storage = findCheapestComponent('storage', s => s.price < 1000000);
            let affordableCase = findCheapestComponent('case', c => c.price < 800000);
            caseComponent = affordableCase ? affordableCase : findCheapestComponent('case');
            cooler = null;
            break;
        case 'basic-8-15m':
            cpu = findCheapestComponent('cpu', c => c.price >= 2500000 && c.price < 4000000);
            mainboard = findCheapestComponent('mainboard', m => m.socket === cpu?.socket && m.ram_type === 'DDR4');
            ram = findCheapestComponent('ram', r => r.ram_type === 'DDR4' && r.name.includes('16GB'));
            gpu = findCheapestComponent('gpu', g => g.price >= 5000000 && g.price < 7000000);
            storage = findCheapestComponent('storage', s => s.name.includes('500GB'));
            caseComponent = findCheapestComponent('case', c => c.price < 1000000);
            cooler = findCheapestComponent('cooler', c => c.price < 500000);
            break;
        case 'mid-15-25m':
            cpu = findCheapestComponent('cpu', c => c.price >= 4000000 && c.price < 6000000);
            mainboard = findCheapestComponent('mainboard', m => m.socket === cpu?.socket);
            ram = findCheapestComponent('ram', r => r.ram_type === mainboard?.ram_type && r.name.includes('16GB'));
            gpu = findCheapestComponent('gpu', g => g.price >= 7000000 && g.price < 13000000);
            storage = findCheapestComponent('storage', s => s.name.includes('1TB'));
            caseComponent = findCheapestComponent('case');
            cooler = findCheapestComponent('cooler', c => c.price < 1000000);
            break;
        case 'high-25-40m':
            cpu = findCheapestComponent('cpu', c => c.price >= 6000000 && c.price < 12000000);
            mainboard = findCheapestComponent('mainboard', m => m.socket === cpu?.socket && m.ram_type === 'DDR5');
            ram = findCheapestComponent('ram', r => r.ram_type === 'DDR5' && r.name.includes('32GB'));
            gpu = findCheapestComponent('gpu', g => g.price >= 13000000 && g.price < 25000000);
            storage = findCheapestComponent('storage', s => s.name.includes('1TB') && s.price > 2000000);
            caseComponent = findCheapestComponent('case', c => c.price > 2000000);
            cooler = findCheapestComponent('cooler', c => c.price > 1000000);
            break;
        case 'luxury-gt-40m':
            cpu = findCheapestComponent('cpu', c => c.price > 12000000);
            mainboard = findCheapestComponent('mainboard', m => m.socket === cpu?.socket && m.ram_type === 'DDR5');
            ram = findCheapestComponent('ram', r => r.ram_type === 'DDR5' && r.name.includes('32GB'));
            gpu = findCheapestComponent('gpu', g => g.price > 25000000);
            storage = findCheapestComponent('storage', s => s.name.includes('2TB'));
            caseComponent = findCheapestComponent('case', c => c.price > 3000000);
            cooler = findCheapestComponent('cooler', c => c.price > 2000000);
            break;
    }
    const essentialComponents = [cpu, mainboard, ram, storage, caseComponent];
    if (cpu && !cpu.name.includes('G') && !gpu) return null; 
    if (essentialComponents.some(c => !c)) return null;
    return calculatePsuAndFinalize([cpu, mainboard, ram, gpu, storage, psu, caseComponent, cooler], budget);
}

function calculatePsuAndFinalize(build, budget) {
    let currentBuild = [...build];
    const wattage = currentBuild.filter(c => c).reduce((sum, item) => sum + (item.wattage || 0), 0);
    const requiredWattage = Math.ceil((wattage * 1.4) / 50) * 50;
    const psu = findCheapestComponent('psu', p => p.wattage >= requiredWattage);
    if (!psu) return null;
    currentBuild[currentBuild.findIndex(c => c?.type === 'psu')] = psu;
    const finalBuild = currentBuild.filter(Boolean);
    const totalPrice = finalBuild.reduce((sum, item) => sum + item.price, 0);
    if (totalPrice > budget.max && !(budget.key === 'student-lt-8m' && totalPrice < 8500000)) {
        return null;
    }
    return { build: finalBuild, totalPrice, wattage: requiredWattage };
}

// --- HI·ªÇN TH·ªä K·∫æT QU·∫¢ V√Ä T∆Ø∆†NG T√ÅC ---
function formatPrice(price) {
    return new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(price);
}

function displayBuildResult(build, totalPrice, wattage) {
    const componentToVietnamese = {
        cpu: 'Vi x·ª≠ l√Ω (CPU)', mainboard: 'Bo m·∫°ch ch·ªß', ram: 'RAM', gpu: 'Card ƒë·ªì h·ªça (VGA)',
        storage: '·ªî c·ª©ng', psu: 'Ngu·ªìn (PSU)', case: 'V·ªè case', cooler: 'T·∫£n nhi·ªát'
    };
    const buildHtml = build.map(item => `
        <div class="build-item-row">
            <img src="${item.image}" alt="${item.name}" class="build-item-image">
            <div class="build-item-info">
                <span class="build-item-type">${componentToVietnamese[item.type] || item.type}</span>
                <span class="build-item-name">${item.name}</span>
            </div>
            <span class="build-item-price">${formatPrice(item.price)}</span>
            <button class="ai-option-btn change-btn" data-action="changeComponent" data-data='${JSON.stringify({type: item.type})}'>Thay ƒë·ªïi</button>
        </div>`).join('');
    const resultHtml = `
        <div class="ai-result-card">
            <div class="ai-result-header"><h3>C·∫•u H√¨nh ƒê·ªÅ Xu·∫•t</h3><p>D·ª±a tr√™n nhu c·∫ßu c·ªßa b·∫°n, ƒë√¢y l√† c·∫•u h√¨nh t·ªëi ∆∞u nh·∫•t (y√™u c·∫ßu kho·∫£ng ${wattage}W).</p></div>
            <div class="ai-result-body">${buildHtml}</div>
            <div class="ai-result-footer"><span>T·ªîNG C·ªòNG:</span><span>${formatPrice(totalPrice)}</span></div>
        </div>`;
    appendMessage('ai', 'T√¥i ƒë√£ ho√†n t·∫•t c·∫•u h√¨nh cho b·∫°n!', resultHtml);
}

function addBuildToCart() {
    appendMessage('ai', "Tuy·ªát v·ªùi! T√¥i ƒëang th√™m c√°c linh ki·ªán v√†o gi·ªè h√†ng...");
    if (typeof addToCartFromAI === 'function') {
        addToCartFromAI(currentBuild);
    }
    setTimeout(() => {
        appendMessage('ai', "ƒê√£ th√™m th√†nh c√¥ng! B·∫°n c√≥ th·ªÉ nh·∫•n v√†o bi·ªÉu t∆∞·ª£ng gi·ªè h√†ng ƒë·ªÉ xem l·∫°i v√† g·ª≠i y√™u c·∫ßu.");
        showOptions([{ text: 'B·∫Øt ƒë·∫ßu l·∫°i', action: 'restart' }]);
    }, 1000);
}

function promptForComponentChange(type) {
    const componentToVietnamese = {
        cpu: 'Vi x·ª≠ l√Ω (CPU)', mainboard: 'Bo m·∫°ch ch·ªß', ram: 'RAM', gpu: 'Card ƒë·ªì h·ªça (VGA)',
        storage: '·ªî c·ª©ng', psu: 'Ngu·ªìn (PSU)', case: 'V·ªè case', cooler: 'T·∫£n nhi·ªát'
    };
    const currentComponent = currentBuild.find(c => c.type === type);
    const cpu = currentBuild.find(c => c.type === 'cpu');
    const mainboard = currentBuild.find(c => c.type === 'mainboard');
    let filterFunc = () => true;
    if (type === 'mainboard') filterFunc = m => m.socket === cpu?.socket;
    else if (type === 'cpu') filterFunc = c => c.socket === mainboard?.socket;
    else if (type === 'ram') filterFunc = r => r.ram_type === mainboard?.ram_type;
    const availableOptions = findComponents(type, filterFunc);
    const optionsHtml = availableOptions.map(item => `
        <div class="build-item-row ${item.id === currentComponent.id ? 'current' : ''}">
            <img src="${item.image}" alt="${item.name}" class="build-item-image">
            <div class="build-item-info"><span class="build-item-name">${item.name}</span></div>
            <span class="build-item-price">${formatPrice(item.price)}</span>
            <button class="ai-option-btn select-btn" ${item.id === currentComponent.id ? 'disabled' : ''}
                data-action="selectNewComponent" data-data='${JSON.stringify({ newComponent: item })}'>
                Ch·ªçn
            </button>
        </div>`).join('');
    const resultHtml = `
        <div class="ai-result-card">
            <div class="ai-result-header"><h3>Ch·ªçn ${componentToVietnamese[type]} thay th·∫ø</h3><p>C√°c l·ª±a ch·ªçn d∆∞·ªõi ƒë√¢y ƒë·ªÅu t∆∞∆°ng th√≠ch.</p></div>
            <div class="ai-result-body">${optionsHtml}</div>
        </div>`;
    appendMessage('ai', `ƒê√¢y l√† c√°c l·ª±a ch·ªçn cho ${componentToVietnamese[type]}:`, resultHtml);
    showOptions([{ text: 'Quay l·∫°i', action: 'redisplayBuild' }]);
}

function updateComponent(newComponent) {
    const index = currentBuild.findIndex(c => c.type === newComponent.type);
    if (index !== -1) {
        currentBuild[index] = newComponent;
        const cpu = currentBuild.find(c => c.type === 'cpu');
        const mainboard = currentBuild.find(c => c.type === 'mainboard');
        if (newComponent.type === 'cpu' && newComponent.socket !== mainboard.socket) {
            const newMainboard = findCheapestComponent('mainboard', m => m.socket === newComponent.socket);
            currentBuild[currentBuild.findIndex(c => c.type === 'mainboard')] = newMainboard;
        }
        if (newComponent.type === 'mainboard') {
             if (newComponent.socket !== cpu.socket) {
                 const newCpu = findCheapestComponent('cpu', c => c.socket === newComponent.socket);
                 currentBuild[currentBuild.findIndex(c => c.type === 'cpu')] = newCpu;
             }
             const ramIndex = currentBuild.findIndex(c => c.type === 'ram');
             if (currentBuild[ramIndex].ram_type !== newComponent.ram_type) {
                 const newRam = findCheapestComponent('ram', r => r.ram_type === newComponent.ram_type);
                 currentBuild[ramIndex] = newRam;
             }
        }
        const result = calculatePsuAndFinalize(currentBuild, conversationState.budget);
        if (result && result.build) {
            currentBuild = result.build;
            displayBuildResult(result.build, result.totalPrice, result.wattage);
            showOptions([{ text: 'Th√™m v√†o Y√™u C·∫ßu', action: 'addToCart' }, { text: 'L√†m l·∫°i t·ª´ ƒë·∫ßu', action: 'restart' }]);
        } else {
             appendMessage('ai', "R·∫•t ti·∫øc, c·∫•u h√¨nh m·ªõi v∆∞·ª£t qu√° ng√¢n s√°ch c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i.");
             showOptions([{ text: 'L√†m l·∫°i t·ª´ ƒë·∫ßu', action: 'restart' }]);
        }
    }
}

